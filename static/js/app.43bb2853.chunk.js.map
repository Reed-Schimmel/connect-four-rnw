{"version":3,"sources":["src/components/GridCell.js","src/components/GridRow.js","src/functions/index.js","src/components/GameGrid.js","src/components/Popup.js","App.js","web-build/register-service-worker.js"],"names":["colors","null","1","2","player","addPiece","TouchableOpacity","disabled","onPress","style","styles","gamepiece","backgroundColor","StyleSheet","create","borderRadius","borderColor","borderWidth","margin","flex","row","rowNum","makeAddPiece","View","map","cell","i","GridCell","key","flexDirection","checkNext","board","r","c","dr","dc","nextR","nextC","width","Dimensions","get","passUpSelectedPlayer","setWinner","useState","Array","fill","selectedPlayer","state","setState","newBoard","winner","deltas","checkForWin","console","log","some","e","grid","GridRow","padding","height","aspectRatio","title","message","buttonTitle","isVisible","backdrop","container","textBox","Text","buttonBox","Button","position","left","right","top","bottom","zIndex","justifyContent","minWidth","minHeight","alignSelf","textAlign","fontWeight","fontSize","marginBottom","bottonBox","undefined","boardKey","setBoardKey","Popup","GameGrid","playerButtonView","playerButtons","playerText","alignItems","alignContent","paddingHorizontal","color","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error"],"mappings":"iLAGMA,EAAS,CAAEC,KAAM,QAASC,EAAG,MAAOC,EAAG,QAE9B,kBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,SAAX,OACb,kBAACC,EAAA,EAAD,CACEC,SAAqB,OAAXH,EACVI,QAAS,kBAAMH,KACfI,MAAO,CACLC,EAAOC,UACP,CAAEC,gBAAiBZ,EAAOI,QAI1BM,EAASG,IAAWC,OAAO,CAC/BH,UAAW,CACTI,aAAc,MACdC,YAAa,OACbC,YAAa,EACbC,OAAQ,KACRC,KAAM,KCjBK,kBAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,aAAhB,OACb,kBAACC,EAAA,EAAD,CAAMd,MAAOC,EAAOU,KACjBA,EAAII,KAAI,SAACC,EAAMC,GAAP,OAAa,kBAACC,EAAD,CAAUC,IAAG,GAAKP,EAASK,EAAKtB,OAAQqB,EAAMpB,SAAUiB,EAAaD,EAAQK,UAIjGhB,EAASG,IAAWC,OAAO,CAC/BM,IAAK,CACHS,cAAe,MACfV,KAAM,K,i2BCXV,IAOMW,EAAY,SAAZA,EAAaC,EAAOC,EAAGC,EAAGC,EAAIC,GAClC,IAAMC,EAAQJ,EAAIE,EACZG,EAAQJ,EAAIE,EAGlB,OAAKJ,EAAMK,IAAWL,EAAMK,GAAOC,IAEnBN,EAAMC,GAAGC,KACZF,EAAMK,GAAOC,GACE,EAAIP,EAAUC,EAAOK,EAAOC,EAAOH,EAAIC,GAJjB,GCM5CG,EAAUC,IAAWC,IAAI,UAAzBF,MACO,cAA0C,IAAvCG,EAAsC,EAAtCA,qBAAsBC,EAAgB,EAAhBA,UAAgB,EAC5BC,mBAAS,CACjCZ,MALoBa,MAAM,GAAGC,KAAK,MAAMrB,KAAI,kBAAMoB,MAAM,GAAGC,KAAK,SAMhEC,eAAgB,IAHoC,WAC/CC,EAD+C,KACxCC,EADwC,KAShD1B,EAAe,SAACU,EAAGC,GAAJ,OAAU,WAI7B,IAHA,IAAMgB,EAAQ,IAAOF,EAAMhB,OAEvBL,EAAI,EACDA,GAAK,GAAG,CACb,GAAuB,OAAnBuB,EAASvB,GAAGO,GAAa,CAC3BgB,EAASvB,GAAGO,GAAKc,EAAMD,eACvB,MAEFpB,IAIF,IAAMoB,EAA0C,IAAzBC,EAAMD,eAAuB,EAAI,EACxDL,EAAqBK,GAErB,IAAMI,EDzBiB,SAACnB,EAAOC,EAAGC,GAIpC,IAHA,IAAMkB,EAAS,EAAE,EAAG,EAAG,GAGvB,MAAiBA,EAAjB,eACE,IADG,IACH,EADSjB,EAAE,KACX,IAAiBiB,KAAjB,aAAyB,CAAC,IAAfhB,EAAc,QACvB,IAAMD,IAAMC,EAAK,MAEjB,GADeL,EAAUC,EAAOC,EAAGC,EAAGC,EAAIC,GAAML,EAAUC,EAAOC,EAAGC,GAAI,EAAIC,GAAI,EAAIC,IACtE,EAAG,OAAOJ,EAAMC,GAAGC,ICiBpBmB,CAAYH,EAAUvB,EAAGO,GACxCoB,QAAQC,IAAI,oBAAqBJ,GAE7BA,EACFR,EAAUQ,EAAQD,GACH,IAANvB,GAAYuB,EAAS,GAAGM,MAAK,SAAAC,GAAC,OAAU,OAANA,KAK3CR,EAAS,CAAEjB,MAAOkB,EAAUH,mBAF5BJ,EAAU,WAMd,OACE,kBAACnB,EAAA,EAAD,CAAMd,MAAOC,EAAO+C,MACjBV,EAAMhB,MAAMP,KAAI,SAACJ,EAAKM,GAAN,OAAY,kBAACgC,EAAD,CAAS9B,IAAKF,EAAGN,IAAKA,EAAKC,OAAQK,EAAGJ,aAAcA,SAKjFZ,EAASG,IAAWC,OAAO,CAC/B2C,KAAM,CACJxC,YAAa,GACbL,gBAAiB,SACjB+C,QAAS,GACTrB,MAAO,GAAMA,EACbsB,OAAe,EAAI,EAAX,GAAgBtB,EACxBuB,YAAa,K,QCrEF,cAA0D,IAAvDC,EAAsD,EAAtDA,MAAOC,EAA+C,EAA/CA,QAASvD,EAAsC,EAAtCA,QAASwD,EAA6B,EAA7BA,YACzC,OADsE,EAAhBC,WAEpD,kBAAC1C,EAAA,EAAD,CAAMd,MAAOC,EAAOwD,UAClB,kBAAC3C,EAAA,EAAD,CAAMd,MAAOC,EAAOyD,WAClB,kBAAC5C,EAAA,EAAD,CAAMd,MAAOC,EAAO0D,SAClB,kBAACC,EAAA,EAAD,CAAM5D,MAAOC,EAAOoD,OAAQA,GAC5B,kBAACO,EAAA,EAAD,CAAM5D,MAAOC,EAAOqD,SAAUA,IAEhC,kBAACxC,EAAA,EAAD,CAAMd,MAAOC,EAAO4D,WAClB,kBAACC,EAAA,EAAD,CACE/D,QAASA,EACTsD,MAAOE,QAQbtD,EAASG,IAAWC,OAAO,CAC/BoD,SAAU,CACRM,SAAU,WACVC,KAAM,EACNC,MAAO,EACPC,IAAK,EACLC,OAAQ,EACRC,OAAQ,EACRjE,gBAAiB,kBACjBkE,eAAgB,UAElBX,UAAW,CACTjD,OAAQ,MACR6D,SAAU,MACVC,UAAW,MACX/D,YAAa,EACbE,MAAO,EACPP,gBAAiB,OACjBkE,eAAgB,eAChBG,UAAW,UAEbb,QAAS,CACPjD,KAAM,EACN+D,UAAW,SACXvB,QAAS,EACTmB,eAAgB,aAChB7D,YAAa,GAEf6C,MAAO,CAAEqB,WAAY,OAAQC,SAAU,GAAIC,aAAc,IACzDtB,QAAS,CAAEqB,SAAU,MACrBE,UAAW,CAAE3B,QAAS,EAAGxC,KAAM,KCZ3BT,GArCS,eAAO,IAAD,EACoBiC,mBAAS,GAD7B,WACZvC,EADY,KACJqC,EADI,OAESE,wBAAS4C,GAFlB,WAEZrC,EAFY,KAEJR,EAFI,OAGaC,mBAAS,GAHtB,WAGZ6C,EAHY,KAGFC,EAHE,KAKnB,OACE,kBAAClE,EAAA,EAAD,CAAMd,MAAOC,EAAOyD,WACjBjB,GAAU,kBAACwC,EAAD,CACT5B,MAAM,YACNC,QAAoB,UAAXb,EACL,aADK,UAEKA,EAFL,SAGT1C,QAAS,WACPkC,OAAU6C,GACVE,EAAYD,EAAW,GACvB/C,EAAqB,IAEvBuB,YAAY,aACZC,UAAWf,IAEb,kBAACyC,EAAD,CAAUlD,qBAAsBA,EAAsBC,UAAWA,EAAWd,IAAK4D,IACjF,kBAACjE,EAAA,EAAD,CAAMd,MAAOC,EAAOkF,kBAClB,kBAACtF,EAAA,EAAD,CAAkBC,UAAQ,EACxBE,MAAO,CAACC,EAAOmF,cAA2B,IAAXzF,GAAiB,CAAEQ,gBAAiB,SAEnE,kBAACyD,EAAA,EAAD,CAAM5D,MAAOC,EAAOoF,YAApB,aAEF,kBAACxF,EAAA,EAAD,CAAkBC,UAAQ,EACxBE,MAAO,CAACC,EAAOmF,cAA2B,IAAXzF,GAAiB,CAAEQ,gBAAiB,UAEnE,kBAACyD,EAAA,EAAD,CAAM5D,MAAOC,EAAOoF,YAApB,gBAOKjF,IAAWC,OAAO,CAC/BqD,UAAW,CACThD,KAAM,EACNP,gBAAiB,OACjBmF,WAAY,SACZjB,eAAgB,UAElBc,iBAAkB,CAChB/D,cAAe,MACfmE,aAAc,eACd1D,MAAO,OACPwC,eAAgB,UAElBe,cAAe,CACb3E,OAAQ,GACR6D,SAAU,MACVnB,OAAQ,OACR3C,YAAa,EACbF,aAAc,KACdmE,UAAW,SACXJ,eAAgB,SAChBiB,WAAY,SACZnF,gBAAiB,OACjBiB,cAAe,MACfoE,kBAAmB,GAErBH,WAAY,CACVV,SAAU,OACVc,MAAO,QACP/E,KAAM,O,2DCrEN,kBAAmBgF,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cACPC,SAAS,uCAAwC,CAAEC,MAAO,mBAC1DC,MAAK,SAASC,OAGdC,OAAM,SAASC,GACdvD,QAAQqD,KAAK,oCAAqCE,W","file":"static/js/app.43bb2853.chunk.js","sourcesContent":["import React from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nconst colors = { null: 'white', 1: 'red', 2: 'blue' };\n\nexport default ({ player, addPiece }) => (\n  <TouchableOpacity\n    disabled={player !== null}\n    onPress={() => addPiece()}\n    style={[\n      styles.gamepiece,\n      { backgroundColor: colors[player] },\n    ]} />\n);\n\nconst styles = StyleSheet.create({\n  gamepiece: {\n    borderRadius: '50%',\n    borderColor: 'grey',\n    borderWidth: 5,\n    margin: '1%',\n    flex: 1,\n  },\n});\n","import React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport GridCell from './GridCell';\n\nexport default ({ row, rowNum, makeAddPiece }) => (\n  <View style={styles.row}>\n    {row.map((cell, i) => <GridCell key={`${rowNum}${i}`} player={cell} addPiece={makeAddPiece(rowNum, i)} />)}\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: \"row\",\n    flex: 1,\n  },\n});\n","// useful for debugging\n// given a delta, print the human readble direction\nconst dir = (dr, dc) => {\n  const rs = { '-1': 'up', '0': '', '1': 'down' };\n  const cs = { '-1': 'left', '0': '', '1': 'right' };\n  return (rs[dr] + ' ' + cs[dc]).trim();\n};\n\n// Recursive function to find \"in a row\" game pieces\nconst checkNext = (board, r, c, dr, dc) => {\n  const nextR = r + dr;\n  const nextC = c + dc;\n\n  // if outside of gameboard, escape.\n  if (!board[nextR] || !board[nextR][nextC]) return 0;\n\n  const current = board[r][c];\n  const next = board[nextR][nextC];\n  return (current === next) ? 1 + checkNext(board, nextR, nextC, dr, dc) : 0;\n};\n\nexport const checkForWin = (board, r, c) => {\n  const deltas = [-1, 0, 1];\n\n  // counter-clockwise check for 4+ pieces in a row\n  for (const dr of deltas) {\n    for (const dc of deltas) {\n      if (!(dr || dc)) break; // skip delta, 0,0\n      const inARow = checkNext(board, r, c, dr, dc) + checkNext(board, r, c, -1 * dr,-1 * dc);\n      if (inARow >= 3) return board[r][c];\n    }\n  }\n};\n","import React, { useState } from 'react';\nimport { View, StyleSheet, Dimensions } from 'react-native';\nimport GridRow from './GridRow';\nimport { checkForWin } from '../functions';\n\n\n/** \n * board: (6 rows, 7 columns)\n    [\n      [null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null],\n    ]\n */\n\nconst makeBoard = () => Array(6).fill(null).map(() => Array(7).fill(null));\n\nconst { width } = Dimensions.get(\"window\");\nexport default ({ passUpSelectedPlayer, setWinner }) => {\n  const [state, setState] = useState({\n    board: makeBoard(),\n    selectedPlayer: 1,\n  });\n\n  // H.O.F for game rows / pieces to customize this action for their location\n  // Used to be important, now I think the higher order isn't needed, but\n  // don't break what isn't broken.\n  const makeAddPiece = (r, c) => () => {\n    const newBoard = [...state.board];\n\n    let i = 5;\n    while (i >= 0) {\n      if (newBoard[i][c] === null) {\n        newBoard[i][c] = state.selectedPlayer;\n        break;\n      }\n      i--;\n    }\n\n    // change player and tell app state\n    const selectedPlayer = state.selectedPlayer === 1 ? 2 : 1;\n    passUpSelectedPlayer(selectedPlayer);\n\n    const winner = checkForWin(newBoard, i, c);\n    console.log('winner is player:', winner);\n\n    if (winner) {\n      setWinner(winner, newBoard);\n    } else if (i === 0 && !newBoard[0].some(e => e === null)) {\n      // if we just filled the top slot and there are no more open spaces\n      // in the top slot, the game is over.\n      setWinner('stale');\n    } else {\n      setState({ board: newBoard, selectedPlayer });\n    }\n  };\n\n  return (\n    <View style={styles.grid}>\n      {state.board.map((row, i) => <GridRow key={i} row={row} rowNum={i} makeAddPiece={makeAddPiece} />)}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  grid: {\n    borderWidth: 10,\n    backgroundColor: 'purple',\n    padding: 10,\n    width: 0.8 * width,\n    height: 0.8 * (6 / 7) * width,\n    aspectRatio: 1,\n  }\n});\n","import React, { useState } from 'react';\nimport { View, Text, StyleSheet, Button } from 'react-native';\n\n// Popup view\n\nexport default ({ title, message, onPress, buttonTitle, isVisible }) => {\n  return isVisible && (\n    <View style={styles.backdrop}>\n      <View style={styles.container}>\n        <View style={styles.textBox}>\n          <Text style={styles.title}>{title}</Text>\n          <Text style={styles.message}>{message}</Text>\n        </View>\n        <View style={styles.buttonBox}>\n          <Button\n            onPress={onPress}\n            title={buttonTitle}\n          />\n        </View>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  backdrop: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n    zIndex: 5,\n    backgroundColor: 'rgba(0,0,0,0.7)',\n    justifyContent: 'center'\n  },\n  container: {\n    margin: '25%',\n    minWidth: '25%',\n    minHeight: '15%',\n    borderWidth: 1,\n    flex: -1,\n    backgroundColor: '#FFF',\n    justifyContent: 'space-evenly',\n    alignSelf: 'center'\n  },\n  textBox: {\n    flex: 1,\n    textAlign: 'center',\n    padding: 5,\n    justifyContent: 'flex-start',\n    borderWidth: 1,\n  },\n  title: { fontWeight: 'bold', fontSize: 32, marginBottom: 10 },\n  message: { fontSize: '16' },\n  bottonBox: { padding: 5, flex: 1 },\n});","import React, { useState } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\nimport GameGrid from './src/components/GameGrid';\nimport Popup from './src/components/Popup';\n\nexport default () => {\n  const [player, passUpSelectedPlayer] = useState(1);\n  const [winner, setWinner] = useState(undefined);\n  const [boardKey, setBoardKey] = useState(1); // used to recreate the board object.\n\n  return (\n    <View style={styles.container}>\n      {winner && <Popup\n        title=\"Game Over\"\n        message={winner === 'stale'\n          ? \"Stalemate!\"\n          : `Player ${winner} wins!`}\n        onPress={() => { // reset state\n          setWinner(undefined);\n          setBoardKey(boardKey + 1);\n          passUpSelectedPlayer(1);\n        }}\n        buttonTitle=\"Play Again\"\n        isVisible={winner}\n      />}\n      <GameGrid passUpSelectedPlayer={passUpSelectedPlayer} setWinner={setWinner} key={boardKey} />\n      <View style={styles.playerButtonView}>\n        <TouchableOpacity disabled\n          style={[styles.playerButtons, (player === 1) && { backgroundColor: 'red' }]}\n        >\n          <Text style={styles.playerText}>Player 1</Text>\n        </TouchableOpacity>\n        <TouchableOpacity disabled\n          style={[styles.playerButtons, (player === 2) && { backgroundColor: 'blue' }]}\n        >\n          <Text style={styles.playerText}>Player 2</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  playerButtonView: {\n    flexDirection: 'row',\n    alignContent: 'space-around',\n    width: '100%',\n    justifyContent: 'center'\n  },\n  playerButtons: {\n    margin: 20,\n    minWidth: '10%',\n    height: '100%',\n    borderWidth: 2,\n    borderRadius: '5%',\n    textAlign: 'center',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'grey',\n    flexDirection: 'row',\n    paddingHorizontal: 5,\n  },\n  playerText: { // TODO: text scaling\n    fontSize: '120%',\n    color: 'white',\n    flex: 1,\n  },\n});\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/connect-four/expo-service-worker.js', { scope: '/connect-four/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}